---
#
#
#

- name: Get next VM ID
  register: nextid
  command: "pvesh get /cluster/nextid"

- set_fact:
    newid: "{{ nextid.stdout | regex_replace('(\\W+)') | int }}"

- name: Create VM
  command: "pvesh create /nodes/{{ proxmox.node }}/qemu/{{ vm.template_id }}/clone -newid {{ newid }} -name {{ vm.name }}"

- name: Wait for the VM to be created
  wait_for:
    timeout: 10

- name: Update VM Settings
  proxmox_kvm:
    agent: True
    timeout: 600
    api_user: "{{ proxmox.username }}"
    api_password: "{{ proxmox.password }}"
    api_host: "{{ proxmox.hostname }}"
    node: "{{ proxmox.node }}"
    name: "{{ vm.name }}"
    sockets: "{{ vm.sockets }}"
    cores: "{{ vm.cores }}"
    memory: "{{ vm.max_memory }}"
    balloon: "{{ vm.min_memory }}"
    ipconfig: '{"ipconfig0": "ip={{ vm.network.ip }}{{ vm.network.netmask }},gw={{ vm.network.gateway }}"}'
    update: yes

- name: Update VM VLAN if set
  command: "pvesh set /nodes/{{ proxmox.node }}/qemu/{{ newid }}/config -net0 'virtio,bridge=vmbr0,tag={{ vm.network.vlan }}'"
  when: vm.network.vlan != "" and vm.network.vlan != 10

- name: Resize the VM Disk
  command: "qm resize {{ newid }} scsi0 +{{ vm.disk_size - 64 }}G"
  when: vm.disk_size > 64

- name: Create a snapshot
  command: "qm snapshot {{ newid }} initial --description 'Snapshot created by Ansible after creating the VM before starting it'"

- name: Start VM
  proxmox_kvm:
    agent: True
    timeout: 600
    api_user: "{{ proxmox.username }}"
    api_password: "{{ proxmox.password }}"
    api_host: "{{ proxmox.hostname }}"
    node: "{{ proxmox.node }}"
    name: "{{ vm.name }}"
    state: started

- name: Check if the VM was created
  proxmox_kvm:
    agent: True
    timeout: 600
    api_user: "{{ proxmox.username }}"
    api_password: "{{ proxmox.password }}"
    api_host: "{{ proxmox.hostname }}"
    node: "{{ proxmox.node }}"
    name: "{{ vm.name }}"
    state: current
  register: machine_status

- name: Add host to groups
  add_host:
    name: "{{ vm.name }}"
    ansible_host: "{{ vm.network.ip }}"
    ansible_user: "ansible"
    groups: "{{ vm.groups + ['just_created'] }}"
    firewall: "{{ vm.firewall }}"
    mounts: "{{ vm.mounts }}"
    dns_aliases: "{{ vm.dns_aliases }}"
    vars: "{{ vm.vars }}"
  when: machine_status.status == "running"
